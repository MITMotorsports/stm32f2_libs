
can_autogen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000eac  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001030  08001030  00011030  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001040  08001040  00011040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001048  08001048  00011048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800104c  0800104c  0001104c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08001050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000064  20000004  08001054  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000068  08001054  00020068  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a278  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000018d4  00000000  00000000  0002a2a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001822  00000000  00000000  0002bb79  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000003c8  00000000  00000000  0002d3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000580  00000000  00000000  0002d768  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000028a2  00000000  00000000  0002dce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001d40  00000000  00000000  0003058a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000322ca  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000008e8  00000000  00000000  00032348  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000004 	.word	0x20000004
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08001018 	.word	0x08001018

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000008 	.word	0x20000008
 80001c0:	08001018 	.word	0x08001018

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b97a 	b.w	80004d0 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	468c      	mov	ip, r1
 80001fa:	460e      	mov	r6, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	9d08      	ldr	r5, [sp, #32]
 8000200:	2b00      	cmp	r3, #0
 8000202:	d150      	bne.n	80002a6 <__udivmoddi4+0xb2>
 8000204:	428a      	cmp	r2, r1
 8000206:	4617      	mov	r7, r2
 8000208:	d96c      	bls.n	80002e4 <__udivmoddi4+0xf0>
 800020a:	fab2 fe82 	clz	lr, r2
 800020e:	f1be 0f00 	cmp.w	lr, #0
 8000212:	d00b      	beq.n	800022c <__udivmoddi4+0x38>
 8000214:	f1ce 0c20 	rsb	ip, lr, #32
 8000218:	fa01 f60e 	lsl.w	r6, r1, lr
 800021c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000220:	fa02 f70e 	lsl.w	r7, r2, lr
 8000224:	ea4c 0c06 	orr.w	ip, ip, r6
 8000228:	fa00 f40e 	lsl.w	r4, r0, lr
 800022c:	0c3a      	lsrs	r2, r7, #16
 800022e:	fbbc f9f2 	udiv	r9, ip, r2
 8000232:	b2bb      	uxth	r3, r7
 8000234:	fb02 cc19 	mls	ip, r2, r9, ip
 8000238:	fb09 fa03 	mul.w	sl, r9, r3
 800023c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000240:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8000244:	45b2      	cmp	sl, r6
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x6a>
 8000248:	19f6      	adds	r6, r6, r7
 800024a:	f109 31ff 	add.w	r1, r9, #4294967295
 800024e:	f080 8125 	bcs.w	800049c <__udivmoddi4+0x2a8>
 8000252:	45b2      	cmp	sl, r6
 8000254:	f240 8122 	bls.w	800049c <__udivmoddi4+0x2a8>
 8000258:	f1a9 0902 	sub.w	r9, r9, #2
 800025c:	443e      	add	r6, r7
 800025e:	eba6 060a 	sub.w	r6, r6, sl
 8000262:	fbb6 f0f2 	udiv	r0, r6, r2
 8000266:	fb02 6610 	mls	r6, r2, r0, r6
 800026a:	fb00 f303 	mul.w	r3, r0, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000274:	42a3      	cmp	r3, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x98>
 8000278:	19e4      	adds	r4, r4, r7
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 810b 	bcs.w	8000498 <__udivmoddi4+0x2a4>
 8000282:	42a3      	cmp	r3, r4
 8000284:	f240 8108 	bls.w	8000498 <__udivmoddi4+0x2a4>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	2100      	movs	r1, #0
 800028e:	1ae4      	subs	r4, r4, r3
 8000290:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000294:	2d00      	cmp	r5, #0
 8000296:	d062      	beq.n	800035e <__udivmoddi4+0x16a>
 8000298:	2300      	movs	r3, #0
 800029a:	fa24 f40e 	lsr.w	r4, r4, lr
 800029e:	602c      	str	r4, [r5, #0]
 80002a0:	606b      	str	r3, [r5, #4]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0xc6>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	d055      	beq.n	800035a <__udivmoddi4+0x166>
 80002ae:	2100      	movs	r1, #0
 80002b0:	e885 0041 	stmia.w	r5, {r0, r6}
 80002b4:	4608      	mov	r0, r1
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	f040 808f 	bne.w	80003e2 <__udivmoddi4+0x1ee>
 80002c4:	42b3      	cmp	r3, r6
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xda>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80fc 	bhi.w	80004c6 <__udivmoddi4+0x2d2>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb66 0603 	sbc.w	r6, r6, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	46b4      	mov	ip, r6
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d040      	beq.n	800035e <__udivmoddi4+0x16a>
 80002dc:	e885 1010 	stmia.w	r5, {r4, ip}
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	b912      	cbnz	r2, 80002ec <__udivmoddi4+0xf8>
 80002e6:	2701      	movs	r7, #1
 80002e8:	fbb7 f7f2 	udiv	r7, r7, r2
 80002ec:	fab7 fe87 	clz	lr, r7
 80002f0:	f1be 0f00 	cmp.w	lr, #0
 80002f4:	d135      	bne.n	8000362 <__udivmoddi4+0x16e>
 80002f6:	2101      	movs	r1, #1
 80002f8:	1bf6      	subs	r6, r6, r7
 80002fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80002fe:	fa1f f887 	uxth.w	r8, r7
 8000302:	fbb6 f2fc 	udiv	r2, r6, ip
 8000306:	fb0c 6612 	mls	r6, ip, r2, r6
 800030a:	fb08 f002 	mul.w	r0, r8, r2
 800030e:	0c23      	lsrs	r3, r4, #16
 8000310:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8000314:	42b0      	cmp	r0, r6
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x134>
 8000318:	19f6      	adds	r6, r6, r7
 800031a:	f102 33ff 	add.w	r3, r2, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x132>
 8000320:	42b0      	cmp	r0, r6
 8000322:	f200 80d2 	bhi.w	80004ca <__udivmoddi4+0x2d6>
 8000326:	461a      	mov	r2, r3
 8000328:	1a36      	subs	r6, r6, r0
 800032a:	fbb6 f0fc 	udiv	r0, r6, ip
 800032e:	fb0c 6610 	mls	r6, ip, r0, r6
 8000332:	fb08 f800 	mul.w	r8, r8, r0
 8000336:	b2a3      	uxth	r3, r4
 8000338:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x15c>
 8000340:	19e4      	adds	r4, r4, r7
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x15a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b9 	bhi.w	80004c0 <__udivmoddi4+0x2cc>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000358:	e79c      	b.n	8000294 <__udivmoddi4+0xa0>
 800035a:	4629      	mov	r1, r5
 800035c:	4628      	mov	r0, r5
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fa07 f70e 	lsl.w	r7, r7, lr
 8000366:	f1ce 0320 	rsb	r3, lr, #32
 800036a:	fa26 f203 	lsr.w	r2, r6, r3
 800036e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000372:	fbb2 f1fc 	udiv	r1, r2, ip
 8000376:	fa1f f887 	uxth.w	r8, r7
 800037a:	fb0c 2211 	mls	r2, ip, r1, r2
 800037e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000382:	fa20 f303 	lsr.w	r3, r0, r3
 8000386:	fb01 f908 	mul.w	r9, r1, r8
 800038a:	4333      	orrs	r3, r6
 800038c:	0c1e      	lsrs	r6, r3, #16
 800038e:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000392:	45b1      	cmp	r9, r6
 8000394:	fa00 f40e 	lsl.w	r4, r0, lr
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x1ba>
 800039a:	19f6      	adds	r6, r6, r7
 800039c:	f101 32ff 	add.w	r2, r1, #4294967295
 80003a0:	f080 808c 	bcs.w	80004bc <__udivmoddi4+0x2c8>
 80003a4:	45b1      	cmp	r9, r6
 80003a6:	f240 8089 	bls.w	80004bc <__udivmoddi4+0x2c8>
 80003aa:	3902      	subs	r1, #2
 80003ac:	443e      	add	r6, r7
 80003ae:	eba6 0609 	sub.w	r6, r6, r9
 80003b2:	fbb6 f0fc 	udiv	r0, r6, ip
 80003b6:	fb0c 6210 	mls	r2, ip, r0, r6
 80003ba:	fb00 f908 	mul.w	r9, r0, r8
 80003be:	b29e      	uxth	r6, r3
 80003c0:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 80003c4:	45b1      	cmp	r9, r6
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0x1e4>
 80003c8:	19f6      	adds	r6, r6, r7
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	d271      	bcs.n	80004b4 <__udivmoddi4+0x2c0>
 80003d0:	45b1      	cmp	r9, r6
 80003d2:	d96f      	bls.n	80004b4 <__udivmoddi4+0x2c0>
 80003d4:	3802      	subs	r0, #2
 80003d6:	443e      	add	r6, r7
 80003d8:	eba6 0609 	sub.w	r6, r6, r9
 80003dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e0:	e78f      	b.n	8000302 <__udivmoddi4+0x10e>
 80003e2:	f1c1 0720 	rsb	r7, r1, #32
 80003e6:	fa22 f807 	lsr.w	r8, r2, r7
 80003ea:	408b      	lsls	r3, r1
 80003ec:	ea48 0303 	orr.w	r3, r8, r3
 80003f0:	fa26 f407 	lsr.w	r4, r6, r7
 80003f4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80003f8:	fbb4 f9fe 	udiv	r9, r4, lr
 80003fc:	fa1f fc83 	uxth.w	ip, r3
 8000400:	fb0e 4419 	mls	r4, lr, r9, r4
 8000404:	408e      	lsls	r6, r1
 8000406:	fa20 f807 	lsr.w	r8, r0, r7
 800040a:	fb09 fa0c 	mul.w	sl, r9, ip
 800040e:	ea48 0806 	orr.w	r8, r8, r6
 8000412:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8000416:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 800041a:	45a2      	cmp	sl, r4
 800041c:	fa02 f201 	lsl.w	r2, r2, r1
 8000420:	fa00 f601 	lsl.w	r6, r0, r1
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x244>
 8000426:	18e4      	adds	r4, r4, r3
 8000428:	f109 30ff 	add.w	r0, r9, #4294967295
 800042c:	d244      	bcs.n	80004b8 <__udivmoddi4+0x2c4>
 800042e:	45a2      	cmp	sl, r4
 8000430:	d942      	bls.n	80004b8 <__udivmoddi4+0x2c4>
 8000432:	f1a9 0902 	sub.w	r9, r9, #2
 8000436:	441c      	add	r4, r3
 8000438:	eba4 040a 	sub.w	r4, r4, sl
 800043c:	fbb4 f0fe 	udiv	r0, r4, lr
 8000440:	fb0e 4410 	mls	r4, lr, r0, r4
 8000444:	fb00 fc0c 	mul.w	ip, r0, ip
 8000448:	fa1f f888 	uxth.w	r8, r8
 800044c:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000450:	45a4      	cmp	ip, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x270>
 8000454:	18e4      	adds	r4, r4, r3
 8000456:	f100 3eff 	add.w	lr, r0, #4294967295
 800045a:	d229      	bcs.n	80004b0 <__udivmoddi4+0x2bc>
 800045c:	45a4      	cmp	ip, r4
 800045e:	d927      	bls.n	80004b0 <__udivmoddi4+0x2bc>
 8000460:	3802      	subs	r0, #2
 8000462:	441c      	add	r4, r3
 8000464:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000468:	fba0 8902 	umull	r8, r9, r0, r2
 800046c:	eba4 0c0c 	sub.w	ip, r4, ip
 8000470:	45cc      	cmp	ip, r9
 8000472:	46c2      	mov	sl, r8
 8000474:	46ce      	mov	lr, r9
 8000476:	d315      	bcc.n	80004a4 <__udivmoddi4+0x2b0>
 8000478:	d012      	beq.n	80004a0 <__udivmoddi4+0x2ac>
 800047a:	b155      	cbz	r5, 8000492 <__udivmoddi4+0x29e>
 800047c:	ebb6 030a 	subs.w	r3, r6, sl
 8000480:	eb6c 060e 	sbc.w	r6, ip, lr
 8000484:	fa06 f707 	lsl.w	r7, r6, r7
 8000488:	40cb      	lsrs	r3, r1
 800048a:	431f      	orrs	r7, r3
 800048c:	40ce      	lsrs	r6, r1
 800048e:	602f      	str	r7, [r5, #0]
 8000490:	606e      	str	r6, [r5, #4]
 8000492:	2100      	movs	r1, #0
 8000494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000498:	4610      	mov	r0, r2
 800049a:	e6f7      	b.n	800028c <__udivmoddi4+0x98>
 800049c:	4689      	mov	r9, r1
 800049e:	e6de      	b.n	800025e <__udivmoddi4+0x6a>
 80004a0:	4546      	cmp	r6, r8
 80004a2:	d2ea      	bcs.n	800047a <__udivmoddi4+0x286>
 80004a4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a8:	eb69 0e03 	sbc.w	lr, r9, r3
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7e4      	b.n	800047a <__udivmoddi4+0x286>
 80004b0:	4670      	mov	r0, lr
 80004b2:	e7d7      	b.n	8000464 <__udivmoddi4+0x270>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e78f      	b.n	80003d8 <__udivmoddi4+0x1e4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7bd      	b.n	8000438 <__udivmoddi4+0x244>
 80004bc:	4611      	mov	r1, r2
 80004be:	e776      	b.n	80003ae <__udivmoddi4+0x1ba>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e744      	b.n	8000350 <__udivmoddi4+0x15c>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e706      	b.n	80002d8 <__udivmoddi4+0xe4>
 80004ca:	3a02      	subs	r2, #2
 80004cc:	443e      	add	r6, r7
 80004ce:	e72b      	b.n	8000328 <__udivmoddi4+0x134>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <HAL_InitTick+0x24>)
{
 80004d6:	b510      	push	{r4, lr}
 80004d8:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80004da:	6818      	ldr	r0, [r3, #0]
 80004dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80004e4:	f000 f90e 	bl	8000704 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80004e8:	2200      	movs	r2, #0
 80004ea:	4621      	mov	r1, r4
 80004ec:	f04f 30ff 	mov.w	r0, #4294967295
 80004f0:	f000 f8d4 	bl	800069c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80004f4:	2000      	movs	r0, #0
 80004f6:	bd10      	pop	{r4, pc}
 80004f8:	20000000 	.word	0x20000000

080004fc <HAL_Init>:
{
 80004fc:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <HAL_Init+0x30>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000508:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000510:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000518:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051a:	f000 f8ad 	bl	8000678 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800051e:	2000      	movs	r0, #0
 8000520:	f7ff ffd8 	bl	80004d4 <HAL_InitTick>
  HAL_MspInit();
 8000524:	f000 fca2 	bl	8000e6c <HAL_MspInit>
}
 8000528:	2000      	movs	r0, #0
 800052a:	bd08      	pop	{r3, pc}
 800052c:	40023c00 	.word	0x40023c00

08000530 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000530:	4a02      	ldr	r2, [pc, #8]	; (800053c <HAL_IncTick+0xc>)
 8000532:	6813      	ldr	r3, [r2, #0]
 8000534:	3301      	adds	r3, #1
 8000536:	6013      	str	r3, [r2, #0]
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000020 	.word	0x20000020

08000540 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000540:	4b01      	ldr	r3, [pc, #4]	; (8000548 <HAL_GetTick+0x8>)
 8000542:	6818      	ldr	r0, [r3, #0]
}
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	20000020 	.word	0x20000020

0800054c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 800054c:	b570      	push	{r4, r5, r6, lr}
  uint32_t InitStatus = CAN_INITSTATUS_FAILED;
  uint32_t tickstart = 0U;
  
  /* Check CAN handle */
  if(hcan == NULL)
 800054e:	4604      	mov	r4, r0
 8000550:	2800      	cmp	r0, #0
 8000552:	d072      	beq.n	800063a <HAL_CAN_Init+0xee>
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  

  if(hcan->State == HAL_CAN_STATE_RESET)
 8000554:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000558:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800055c:	b91b      	cbnz	r3, 8000566 <HAL_CAN_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 800055e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 8000562:	f000 fcb3 	bl	8000ecc <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 8000566:	2302      	movs	r3, #2
 8000568:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  
  /* Exit from sleep mode */
  hcan->Instance->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 800056c:	6823      	ldr	r3, [r4, #0]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	f022 0202 	bic.w	r2, r2, #2
 8000574:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  hcan->Instance->MCR |= CAN_MCR_INRQ ;
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	f042 0201 	orr.w	r2, r2, #1
 800057c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800057e:	f7ff ffdf 	bl	8000540 <HAL_GetTick>
 8000582:	4606      	mov	r6, r0

  /* Wait the acknowledge */
  while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000584:	6823      	ldr	r3, [r4, #0]
 8000586:	685d      	ldr	r5, [r3, #4]
 8000588:	f015 0501 	ands.w	r5, r5, #1
 800058c:	d057      	beq.n	800063e <HAL_CAN_Init+0xf2>
      return HAL_TIMEOUT;
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 800058e:	685a      	ldr	r2, [r3, #4]
 8000590:	07d1      	lsls	r1, r2, #31
 8000592:	d54f      	bpl.n	8000634 <HAL_CAN_Init+0xe8>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 8000594:	69a2      	ldr	r2, [r4, #24]
 8000596:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_TTCM;
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	bf0c      	ite	eq
 800059c:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 80005a0:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80005a4:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 80005a6:	69e2      	ldr	r2, [r4, #28]
 80005a8:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_ABOM;
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	bf0c      	ite	eq
 80005ae:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 80005b2:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80005b6:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 80005b8:	6a22      	ldr	r2, [r4, #32]
 80005ba:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_AWUM;
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	bf0c      	ite	eq
 80005c0:	f042 0220 	orreq.w	r2, r2, #32
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 80005c4:	f022 0220 	bicne.w	r2, r2, #32
 80005c8:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 80005ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80005cc:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_NART;
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	bf0c      	ite	eq
 80005d2:	f042 0210 	orreq.w	r2, r2, #16
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_NART;
 80005d6:	f022 0210 	bicne.w	r2, r2, #16
 80005da:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 80005dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80005de:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_RFLM;
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	bf0c      	ite	eq
 80005e4:	f042 0208 	orreq.w	r2, r2, #8
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 80005e8:	f022 0208 	bicne.w	r2, r2, #8
 80005ec:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 80005ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80005f0:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_TXFP;
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	bf0c      	ite	eq
 80005f6:	f042 0204 	orreq.w	r2, r2, #4
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 80005fa:	f022 0204 	bicne.w	r2, r2, #4
 80005fe:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000600:	68e1      	ldr	r1, [r4, #12]
 8000602:	68a2      	ldr	r2, [r4, #8]
 8000604:	430a      	orrs	r2, r1
                ((uint32_t)hcan->Init.SJW) | \
 8000606:	6921      	ldr	r1, [r4, #16]
 8000608:	430a      	orrs	r2, r1
                ((uint32_t)hcan->Init.BS1) | \
 800060a:	6961      	ldr	r1, [r4, #20]
 800060c:	430a      	orrs	r2, r1
                ((uint32_t)hcan->Init.BS2) | \
                ((uint32_t)hcan->Init.Prescaler - 1U);
 800060e:	6861      	ldr	r1, [r4, #4]
 8000610:	3901      	subs	r1, #1
                ((uint32_t)hcan->Init.BS2) | \
 8000612:	430a      	orrs	r2, r1
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000614:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	f022 0201 	bic.w	r2, r2, #1
 800061c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800061e:	f7ff ff8f 	bl	8000540 <HAL_GetTick>
 8000622:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000624:	6823      	ldr	r3, [r4, #0]
 8000626:	685a      	ldr	r2, [r3, #4]
 8000628:	07d2      	lsls	r2, r2, #31
 800062a:	d413      	bmi.n	8000654 <HAL_CAN_Init+0x108>
        return HAL_TIMEOUT;
      }
    }

    /* Check acknowledged */
    if ((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 800062c:	6858      	ldr	r0, [r3, #4]
 800062e:	f010 0001 	ands.w	r0, r0, #1
 8000632:	d01b      	beq.n	800066c <HAL_CAN_Init+0x120>
    return HAL_OK;
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 8000634:	2304      	movs	r3, #4
 8000636:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    
    /* Return function status */
    return HAL_ERROR;
 800063a:	2001      	movs	r0, #1
  }
}
 800063c:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 800063e:	f7ff ff7f 	bl	8000540 <HAL_GetTick>
 8000642:	1b80      	subs	r0, r0, r6
 8000644:	280a      	cmp	r0, #10
 8000646:	d99d      	bls.n	8000584 <HAL_CAN_Init+0x38>
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000648:	2003      	movs	r0, #3
      __HAL_UNLOCK(hcan);
 800064a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 800064e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      return HAL_TIMEOUT;
 8000652:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 8000654:	f7ff ff74 	bl	8000540 <HAL_GetTick>
 8000658:	1b40      	subs	r0, r0, r5
 800065a:	280a      	cmp	r0, #10
 800065c:	d9e2      	bls.n	8000624 <HAL_CAN_Init+0xd8>
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 800065e:	2003      	movs	r0, #3
        __HAL_UNLOCK(hcan);
 8000660:	2300      	movs	r3, #0
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000662:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        __HAL_UNLOCK(hcan);
 8000666:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 800066a:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_READY;
 800066c:	2301      	movs	r3, #1
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800066e:	6420      	str	r0, [r4, #64]	; 0x40
    hcan->State = HAL_CAN_STATE_READY;
 8000670:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8000674:	bd70      	pop	{r4, r5, r6, pc}
	...

08000678 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000678:	4a07      	ldr	r2, [pc, #28]	; (8000698 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800067a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800067c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800067e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000682:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000686:	041b      	lsls	r3, r3, #16
 8000688:	0c1b      	lsrs	r3, r3, #16
 800068a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800068e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000692:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000694:	60d3      	str	r3, [r2, #12]
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	68dc      	ldr	r4, [r3, #12]
 80006a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006aa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	bf28      	it	cs
 80006b0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b8:	bf98      	it	ls
 80006ba:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006bc:	fa05 f303 	lsl.w	r3, r5, r3
 80006c0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c4:	bf88      	it	hi
 80006c6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c8:	4019      	ands	r1, r3
 80006ca:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006cc:	fa05 f404 	lsl.w	r4, r5, r4
 80006d0:	3c01      	subs	r4, #1
 80006d2:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80006d4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d6:	ea42 0201 	orr.w	r2, r2, r1
 80006da:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006de:	bfaf      	iteee	ge
 80006e0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	4b06      	ldrlt	r3, [pc, #24]	; (8000700 <HAL_NVIC_SetPriority+0x64>)
 80006e6:	f000 000f 	andlt.w	r0, r0, #15
 80006ea:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	bfa5      	ittet	ge
 80006ee:	b2d2      	uxtbge	r2, r2
 80006f0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006fa:	bd30      	pop	{r4, r5, pc}
 80006fc:	e000ed00 	.word	0xe000ed00
 8000700:	e000ed14 	.word	0xe000ed14

08000704 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000704:	3801      	subs	r0, #1
 8000706:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800070a:	d20a      	bcs.n	8000722 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000710:	4a06      	ldr	r2, [pc, #24]	; (800072c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000712:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000714:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000718:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800071c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000722:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000e010 	.word	0xe000e010
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000732:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	bf0c      	ite	eq
 8000738:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800073c:	f022 0204 	bicne.w	r2, r2, #4
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	4770      	bx	lr
 8000744:	e000e010 	.word	0xe000e010

08000748 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000748:	4770      	bx	lr

0800074a <HAL_SYSTICK_IRQHandler>:
{
 800074a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800074c:	f7ff fffc 	bl	8000748 <HAL_SYSTICK_Callback>
 8000750:	bd08      	pop	{r3, pc}
	...

08000754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000758:	680b      	ldr	r3, [r1, #0]
{
 800075a:	b085      	sub	sp, #20
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800075c:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800075e:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000760:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8000918 <HAL_GPIO_Init+0x1c4>
        temp &= ~(0x0FU << (4U * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000764:	4a6a      	ldr	r2, [pc, #424]	; (8000910 <HAL_GPIO_Init+0x1bc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000766:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 800091c <HAL_GPIO_Init+0x1c8>
    ioposition = 0x01U << position;
 800076a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800076e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000770:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000774:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000778:	45b6      	cmp	lr, r6
 800077a:	f040 80b2 	bne.w	80008e2 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800077e:	684c      	ldr	r4, [r1, #4]
 8000780:	f024 0710 	bic.w	r7, r4, #16
 8000784:	2f02      	cmp	r7, #2
 8000786:	d116      	bne.n	80007b6 <HAL_GPIO_Init+0x62>
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000788:	f04f 0c0f 	mov.w	ip, #15
        temp = GPIOx->AFR[position >> 3U];
 800078c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000790:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000794:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000798:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800079c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80007a0:	fa0c fc0b 	lsl.w	ip, ip, fp
 80007a4:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007a8:	690d      	ldr	r5, [r1, #16]
 80007aa:	fa05 f50b 	lsl.w	r5, r5, fp
 80007ae:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80007b2:	f8ca 5020 	str.w	r5, [sl, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007b6:	2503      	movs	r5, #3
 80007b8:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 80007bc:	fa05 f50a 	lsl.w	r5, r5, sl
 80007c0:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 80007c2:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007c6:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007ca:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007ce:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007d2:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007d4:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007d8:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80007da:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007de:	d811      	bhi.n	8000804 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80007e0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007e2:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007e6:	68cf      	ldr	r7, [r1, #12]
 80007e8:	fa07 fc0a 	lsl.w	ip, r7, sl
 80007ec:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80007f0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80007f2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007f4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007f8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80007fc:	409f      	lsls	r7, r3
 80007fe:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000802:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000804:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000806:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000808:	688f      	ldr	r7, [r1, #8]
 800080a:	fa07 f70a 	lsl.w	r7, r7, sl
 800080e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000810:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000812:	00e5      	lsls	r5, r4, #3
 8000814:	d565      	bpl.n	80008e2 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	f04f 0b00 	mov.w	fp, #0
        temp &= ~(0x0FU << (4U * (position & 0x03)));
 800081a:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	f8cd b00c 	str.w	fp, [sp, #12]
 8000822:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp &= ~(0x0FU << (4U * (position & 0x03)));
 8000826:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800082e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000832:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000836:	4d37      	ldr	r5, [pc, #220]	; (8000914 <HAL_GPIO_Init+0x1c0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000838:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800083c:	9703      	str	r7, [sp, #12]
 800083e:	9f03      	ldr	r7, [sp, #12]
 8000840:	f023 0703 	bic.w	r7, r3, #3
 8000844:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000848:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp = SYSCFG->EXTICR[position >> 2U];
 800084c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03)));
 8000850:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000854:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000858:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03)));
 800085a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800085e:	d047      	beq.n	80008f0 <HAL_GPIO_Init+0x19c>
 8000860:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000864:	42a8      	cmp	r0, r5
 8000866:	d045      	beq.n	80008f4 <HAL_GPIO_Init+0x1a0>
 8000868:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800086c:	42a8      	cmp	r0, r5
 800086e:	d043      	beq.n	80008f8 <HAL_GPIO_Init+0x1a4>
 8000870:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000874:	42a8      	cmp	r0, r5
 8000876:	d041      	beq.n	80008fc <HAL_GPIO_Init+0x1a8>
 8000878:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800087c:	42a8      	cmp	r0, r5
 800087e:	d03f      	beq.n	8000900 <HAL_GPIO_Init+0x1ac>
 8000880:	4548      	cmp	r0, r9
 8000882:	d03f      	beq.n	8000904 <HAL_GPIO_Init+0x1b0>
 8000884:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000888:	42a8      	cmp	r0, r5
 800088a:	d03d      	beq.n	8000908 <HAL_GPIO_Init+0x1b4>
 800088c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000890:	42a8      	cmp	r0, r5
 8000892:	d03b      	beq.n	800090c <HAL_GPIO_Init+0x1b8>
 8000894:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000898:	42a8      	cmp	r0, r5
 800089a:	bf14      	ite	ne
 800089c:	2509      	movne	r5, #9
 800089e:	2508      	moveq	r5, #8
 80008a0:	fa05 f50c 	lsl.w	r5, r5, ip
 80008a4:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80008a8:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 80008aa:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 80008ac:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008ae:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80008b2:	bf0c      	ite	eq
 80008b4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008b6:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80008b8:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80008ba:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008bc:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80008c0:	bf0c      	ite	eq
 80008c2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008c4:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80008c6:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008c8:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008ca:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80008ce:	bf0c      	ite	eq
 80008d0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008d2:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80008d4:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80008d6:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008d8:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008da:	bf54      	ite	pl
 80008dc:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80008de:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80008e0:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008e2:	3301      	adds	r3, #1
 80008e4:	2b10      	cmp	r3, #16
 80008e6:	f47f af40 	bne.w	800076a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008ea:	b005      	add	sp, #20
 80008ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008f0:	465d      	mov	r5, fp
 80008f2:	e7d5      	b.n	80008a0 <HAL_GPIO_Init+0x14c>
 80008f4:	2501      	movs	r5, #1
 80008f6:	e7d3      	b.n	80008a0 <HAL_GPIO_Init+0x14c>
 80008f8:	2502      	movs	r5, #2
 80008fa:	e7d1      	b.n	80008a0 <HAL_GPIO_Init+0x14c>
 80008fc:	2503      	movs	r5, #3
 80008fe:	e7cf      	b.n	80008a0 <HAL_GPIO_Init+0x14c>
 8000900:	2504      	movs	r5, #4
 8000902:	e7cd      	b.n	80008a0 <HAL_GPIO_Init+0x14c>
 8000904:	2505      	movs	r5, #5
 8000906:	e7cb      	b.n	80008a0 <HAL_GPIO_Init+0x14c>
 8000908:	2506      	movs	r5, #6
 800090a:	e7c9      	b.n	80008a0 <HAL_GPIO_Init+0x14c>
 800090c:	2507      	movs	r5, #7
 800090e:	e7c7      	b.n	80008a0 <HAL_GPIO_Init+0x14c>
 8000910:	40013c00 	.word	0x40013c00
 8000914:	40020000 	.word	0x40020000
 8000918:	40023800 	.word	0x40023800
 800091c:	40021400 	.word	0x40021400

08000920 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000922:	4604      	mov	r4, r0
 8000924:	b910      	cbnz	r0, 800092c <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 8000926:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000928:	b003      	add	sp, #12
 800092a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800092c:	6803      	ldr	r3, [r0, #0]
 800092e:	07d8      	lsls	r0, r3, #31
 8000930:	d438      	bmi.n	80009a4 <HAL_RCC_OscConfig+0x84>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000932:	6823      	ldr	r3, [r4, #0]
 8000934:	0799      	lsls	r1, r3, #30
 8000936:	d46b      	bmi.n	8000a10 <HAL_RCC_OscConfig+0xf0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000938:	6823      	ldr	r3, [r4, #0]
 800093a:	071e      	lsls	r6, r3, #28
 800093c:	f100 80b8 	bmi.w	8000ab0 <HAL_RCC_OscConfig+0x190>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000940:	6823      	ldr	r3, [r4, #0]
 8000942:	075d      	lsls	r5, r3, #29
 8000944:	d528      	bpl.n	8000998 <HAL_RCC_OscConfig+0x78>
    __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	9301      	str	r3, [sp, #4]
 800094a:	4ba5      	ldr	r3, [pc, #660]	; (8000be0 <HAL_RCC_OscConfig+0x2c0>)
    PWR->CR |= PWR_CR_DBP;
 800094c:	4da5      	ldr	r5, [pc, #660]	; (8000be4 <HAL_RCC_OscConfig+0x2c4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000950:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000954:	641a      	str	r2, [r3, #64]	; 0x40
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095c:	9301      	str	r3, [sp, #4]
 800095e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000960:	682b      	ldr	r3, [r5, #0]
 8000962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000966:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000968:	f7ff fdea 	bl	8000540 <HAL_GetTick>
 800096c:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800096e:	682b      	ldr	r3, [r5, #0]
 8000970:	05da      	lsls	r2, r3, #23
 8000972:	f140 80bf 	bpl.w	8000af4 <HAL_RCC_OscConfig+0x1d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000976:	4b9c      	ldr	r3, [pc, #624]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
 8000978:	7a22      	ldrb	r2, [r4, #8]
 800097a:	701a      	strb	r2, [r3, #0]
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800097c:	68a3      	ldr	r3, [r4, #8]
 800097e:	2b00      	cmp	r3, #0
 8000980:	f000 80c6 	beq.w	8000b10 <HAL_RCC_OscConfig+0x1f0>
      tickstart = HAL_GetTick();
 8000984:	f7ff fddc 	bl	8000540 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000988:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800098c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800098e:	4d94      	ldr	r5, [pc, #592]	; (8000be0 <HAL_RCC_OscConfig+0x2c0>)
 8000990:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000992:	079b      	lsls	r3, r3, #30
 8000994:	f140 80b5 	bpl.w	8000b02 <HAL_RCC_OscConfig+0x1e2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000998:	69a2      	ldr	r2, [r4, #24]
 800099a:	2a00      	cmp	r2, #0
 800099c:	f040 80c8 	bne.w	8000b30 <HAL_RCC_OscConfig+0x210>
  return HAL_OK;
 80009a0:	2000      	movs	r0, #0
 80009a2:	e7c1      	b.n	8000928 <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80009a4:	4b8e      	ldr	r3, [pc, #568]	; (8000be0 <HAL_RCC_OscConfig+0x2c0>)
 80009a6:	689a      	ldr	r2, [r3, #8]
 80009a8:	f002 020c 	and.w	r2, r2, #12
 80009ac:	2a04      	cmp	r2, #4
 80009ae:	d007      	beq.n	80009c0 <HAL_RCC_OscConfig+0xa0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80009b6:	2a08      	cmp	r2, #8
 80009b8:	d10a      	bne.n	80009d0 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	025a      	lsls	r2, r3, #9
 80009be:	d507      	bpl.n	80009d0 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009c0:	4b87      	ldr	r3, [pc, #540]	; (8000be0 <HAL_RCC_OscConfig+0x2c0>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	039b      	lsls	r3, r3, #14
 80009c6:	d5b4      	bpl.n	8000932 <HAL_RCC_OscConfig+0x12>
 80009c8:	6863      	ldr	r3, [r4, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d1b1      	bne.n	8000932 <HAL_RCC_OscConfig+0x12>
 80009ce:	e7aa      	b.n	8000926 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009d0:	4b86      	ldr	r3, [pc, #536]	; (8000bec <HAL_RCC_OscConfig+0x2cc>)
 80009d2:	7922      	ldrb	r2, [r4, #4]
 80009d4:	701a      	strb	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80009d6:	6863      	ldr	r3, [r4, #4]
 80009d8:	b16b      	cbz	r3, 80009f6 <HAL_RCC_OscConfig+0xd6>
        tickstart = HAL_GetTick();
 80009da:	f7ff fdb1 	bl	8000540 <HAL_GetTick>
 80009de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009e0:	4d7f      	ldr	r5, [pc, #508]	; (8000be0 <HAL_RCC_OscConfig+0x2c0>)
 80009e2:	682b      	ldr	r3, [r5, #0]
 80009e4:	039f      	lsls	r7, r3, #14
 80009e6:	d4a4      	bmi.n	8000932 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009e8:	f7ff fdaa 	bl	8000540 <HAL_GetTick>
 80009ec:	1b80      	subs	r0, r0, r6
 80009ee:	2864      	cmp	r0, #100	; 0x64
 80009f0:	d9f7      	bls.n	80009e2 <HAL_RCC_OscConfig+0xc2>
            return HAL_TIMEOUT;
 80009f2:	2003      	movs	r0, #3
 80009f4:	e798      	b.n	8000928 <HAL_RCC_OscConfig+0x8>
        tickstart = HAL_GetTick();
 80009f6:	f7ff fda3 	bl	8000540 <HAL_GetTick>
 80009fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009fc:	4d78      	ldr	r5, [pc, #480]	; (8000be0 <HAL_RCC_OscConfig+0x2c0>)
 80009fe:	682b      	ldr	r3, [r5, #0]
 8000a00:	0398      	lsls	r0, r3, #14
 8000a02:	d596      	bpl.n	8000932 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a04:	f7ff fd9c 	bl	8000540 <HAL_GetTick>
 8000a08:	1b80      	subs	r0, r0, r6
 8000a0a:	2864      	cmp	r0, #100	; 0x64
 8000a0c:	d9f7      	bls.n	80009fe <HAL_RCC_OscConfig+0xde>
 8000a0e:	e7f0      	b.n	80009f2 <HAL_RCC_OscConfig+0xd2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a10:	4b73      	ldr	r3, [pc, #460]	; (8000be0 <HAL_RCC_OscConfig+0x2c0>)
 8000a12:	689a      	ldr	r2, [r3, #8]
 8000a14:	f012 0f0c 	tst.w	r2, #12
 8000a18:	d007      	beq.n	8000a2a <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a1a:	689a      	ldr	r2, [r3, #8]
 8000a1c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a20:	2a08      	cmp	r2, #8
 8000a22:	d117      	bne.n	8000a54 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	0259      	lsls	r1, r3, #9
 8000a28:	d414      	bmi.n	8000a54 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a2a:	4b6d      	ldr	r3, [pc, #436]	; (8000be0 <HAL_RCC_OscConfig+0x2c0>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	0792      	lsls	r2, r2, #30
 8000a30:	d503      	bpl.n	8000a3a <HAL_RCC_OscConfig+0x11a>
 8000a32:	68e2      	ldr	r2, [r4, #12]
 8000a34:	2a01      	cmp	r2, #1
 8000a36:	f47f af76 	bne.w	8000926 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a3a:	6818      	ldr	r0, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a3c:	22f8      	movs	r2, #248	; 0xf8
 8000a3e:	fa92 f2a2 	rbit	r2, r2
 8000a42:	fab2 f182 	clz	r1, r2
 8000a46:	6922      	ldr	r2, [r4, #16]
 8000a48:	408a      	lsls	r2, r1
 8000a4a:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a52:	e771      	b.n	8000938 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a54:	68e2      	ldr	r2, [r4, #12]
 8000a56:	4b66      	ldr	r3, [pc, #408]	; (8000bf0 <HAL_RCC_OscConfig+0x2d0>)
 8000a58:	b1da      	cbz	r2, 8000a92 <HAL_RCC_OscConfig+0x172>
        __HAL_RCC_HSI_ENABLE();
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a5e:	f7ff fd6f 	bl	8000540 <HAL_GetTick>
 8000a62:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a64:	4d5e      	ldr	r5, [pc, #376]	; (8000be0 <HAL_RCC_OscConfig+0x2c0>)
 8000a66:	682b      	ldr	r3, [r5, #0]
 8000a68:	079b      	lsls	r3, r3, #30
 8000a6a:	d50c      	bpl.n	8000a86 <HAL_RCC_OscConfig+0x166>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a6c:	6829      	ldr	r1, [r5, #0]
 8000a6e:	23f8      	movs	r3, #248	; 0xf8
 8000a70:	fa93 f3a3 	rbit	r3, r3
 8000a74:	fab3 f283 	clz	r2, r3
 8000a78:	6923      	ldr	r3, [r4, #16]
 8000a7a:	4093      	lsls	r3, r2
 8000a7c:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000a80:	4313      	orrs	r3, r2
 8000a82:	602b      	str	r3, [r5, #0]
 8000a84:	e758      	b.n	8000938 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a86:	f7ff fd5b 	bl	8000540 <HAL_GetTick>
 8000a8a:	1b80      	subs	r0, r0, r6
 8000a8c:	2802      	cmp	r0, #2
 8000a8e:	d9ea      	bls.n	8000a66 <HAL_RCC_OscConfig+0x146>
 8000a90:	e7af      	b.n	80009f2 <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_HSI_DISABLE();
 8000a92:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a94:	f7ff fd54 	bl	8000540 <HAL_GetTick>
 8000a98:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a9a:	4d51      	ldr	r5, [pc, #324]	; (8000be0 <HAL_RCC_OscConfig+0x2c0>)
 8000a9c:	682b      	ldr	r3, [r5, #0]
 8000a9e:	079f      	lsls	r7, r3, #30
 8000aa0:	f57f af4a 	bpl.w	8000938 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aa4:	f7ff fd4c 	bl	8000540 <HAL_GetTick>
 8000aa8:	1b80      	subs	r0, r0, r6
 8000aaa:	2802      	cmp	r0, #2
 8000aac:	d9f6      	bls.n	8000a9c <HAL_RCC_OscConfig+0x17c>
 8000aae:	e7a0      	b.n	80009f2 <HAL_RCC_OscConfig+0xd2>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000ab0:	6962      	ldr	r2, [r4, #20]
 8000ab2:	4b50      	ldr	r3, [pc, #320]	; (8000bf4 <HAL_RCC_OscConfig+0x2d4>)
 8000ab4:	b17a      	cbz	r2, 8000ad6 <HAL_RCC_OscConfig+0x1b6>
      __HAL_RCC_LSI_ENABLE();
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000aba:	f7ff fd41 	bl	8000540 <HAL_GetTick>
 8000abe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ac0:	4d47      	ldr	r5, [pc, #284]	; (8000be0 <HAL_RCC_OscConfig+0x2c0>)
 8000ac2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ac4:	0798      	lsls	r0, r3, #30
 8000ac6:	f53f af3b 	bmi.w	8000940 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000aca:	f7ff fd39 	bl	8000540 <HAL_GetTick>
 8000ace:	1b80      	subs	r0, r0, r6
 8000ad0:	2802      	cmp	r0, #2
 8000ad2:	d9f6      	bls.n	8000ac2 <HAL_RCC_OscConfig+0x1a2>
 8000ad4:	e78d      	b.n	80009f2 <HAL_RCC_OscConfig+0xd2>
      __HAL_RCC_LSI_DISABLE();
 8000ad6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ad8:	f7ff fd32 	bl	8000540 <HAL_GetTick>
 8000adc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ade:	4d40      	ldr	r5, [pc, #256]	; (8000be0 <HAL_RCC_OscConfig+0x2c0>)
 8000ae0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ae2:	0799      	lsls	r1, r3, #30
 8000ae4:	f57f af2c 	bpl.w	8000940 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ae8:	f7ff fd2a 	bl	8000540 <HAL_GetTick>
 8000aec:	1b80      	subs	r0, r0, r6
 8000aee:	2802      	cmp	r0, #2
 8000af0:	d9f6      	bls.n	8000ae0 <HAL_RCC_OscConfig+0x1c0>
 8000af2:	e77e      	b.n	80009f2 <HAL_RCC_OscConfig+0xd2>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000af4:	f7ff fd24 	bl	8000540 <HAL_GetTick>
 8000af8:	1b80      	subs	r0, r0, r6
 8000afa:	2802      	cmp	r0, #2
 8000afc:	f67f af37 	bls.w	800096e <HAL_RCC_OscConfig+0x4e>
 8000b00:	e777      	b.n	80009f2 <HAL_RCC_OscConfig+0xd2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b02:	f7ff fd1d 	bl	8000540 <HAL_GetTick>
 8000b06:	1b80      	subs	r0, r0, r6
 8000b08:	42b8      	cmp	r0, r7
 8000b0a:	f67f af41 	bls.w	8000990 <HAL_RCC_OscConfig+0x70>
 8000b0e:	e770      	b.n	80009f2 <HAL_RCC_OscConfig+0xd2>
      tickstart = HAL_GetTick();
 8000b10:	f7ff fd16 	bl	8000540 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b14:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b18:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b1a:	4d31      	ldr	r5, [pc, #196]	; (8000be0 <HAL_RCC_OscConfig+0x2c0>)
 8000b1c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b1e:	0798      	lsls	r0, r3, #30
 8000b20:	f57f af3a 	bpl.w	8000998 <HAL_RCC_OscConfig+0x78>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b24:	f7ff fd0c 	bl	8000540 <HAL_GetTick>
 8000b28:	1b80      	subs	r0, r0, r6
 8000b2a:	42b8      	cmp	r0, r7
 8000b2c:	d9f6      	bls.n	8000b1c <HAL_RCC_OscConfig+0x1fc>
 8000b2e:	e760      	b.n	80009f2 <HAL_RCC_OscConfig+0xd2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b30:	4d2b      	ldr	r5, [pc, #172]	; (8000be0 <HAL_RCC_OscConfig+0x2c0>)
 8000b32:	68ab      	ldr	r3, [r5, #8]
 8000b34:	f003 030c 	and.w	r3, r3, #12
 8000b38:	2b08      	cmp	r3, #8
 8000b3a:	f43f aef4 	beq.w	8000926 <HAL_RCC_OscConfig+0x6>
 8000b3e:	2300      	movs	r3, #0
 8000b40:	4e2d      	ldr	r6, [pc, #180]	; (8000bf8 <HAL_RCC_OscConfig+0x2d8>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b42:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b44:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b46:	d13e      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x2a6>
        tickstart = HAL_GetTick();
 8000b48:	f7ff fcfa 	bl	8000540 <HAL_GetTick>
 8000b4c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b4e:	682b      	ldr	r3, [r5, #0]
 8000b50:	0199      	lsls	r1, r3, #6
 8000b52:	d432      	bmi.n	8000bba <HAL_RCC_OscConfig+0x29a>
 8000b54:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8000b58:	fa97 f7a7 	rbit	r7, r7
 8000b5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                              | \
 8000b60:	fab7 f787 	clz	r7, r7
 8000b64:	fa92 f2a2 	rbit	r2, r2
 8000b68:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000b6c:	fab2 f082 	clz	r0, r2
 8000b70:	fa91 f1a1 	rbit	r1, r1
 8000b74:	fab1 f181 	clz	r1, r1
 8000b78:	6a22      	ldr	r2, [r4, #32]
 8000b7a:	69e3      	ldr	r3, [r4, #28]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b80:	fa02 f707 	lsl.w	r7, r2, r7
 8000b84:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000b86:	433b      	orrs	r3, r7
 8000b88:	0852      	lsrs	r2, r2, #1
 8000b8a:	3a01      	subs	r2, #1
 8000b8c:	4082      	lsls	r2, r0
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b92:	4c13      	ldr	r4, [pc, #76]	; (8000be0 <HAL_RCC_OscConfig+0x2c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                              | \
 8000b94:	fa02 f101 	lsl.w	r1, r2, r1
 8000b98:	430b      	orrs	r3, r1
 8000b9a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000ba0:	f7ff fcce 	bl	8000540 <HAL_GetTick>
 8000ba4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ba6:	6823      	ldr	r3, [r4, #0]
 8000ba8:	019a      	lsls	r2, r3, #6
 8000baa:	f53f aef9 	bmi.w	80009a0 <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bae:	f7ff fcc7 	bl	8000540 <HAL_GetTick>
 8000bb2:	1b40      	subs	r0, r0, r5
 8000bb4:	2864      	cmp	r0, #100	; 0x64
 8000bb6:	d9f6      	bls.n	8000ba6 <HAL_RCC_OscConfig+0x286>
 8000bb8:	e71b      	b.n	80009f2 <HAL_RCC_OscConfig+0xd2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bba:	f7ff fcc1 	bl	8000540 <HAL_GetTick>
 8000bbe:	1bc0      	subs	r0, r0, r7
 8000bc0:	2864      	cmp	r0, #100	; 0x64
 8000bc2:	d9c4      	bls.n	8000b4e <HAL_RCC_OscConfig+0x22e>
 8000bc4:	e715      	b.n	80009f2 <HAL_RCC_OscConfig+0xd2>
        tickstart = HAL_GetTick();
 8000bc6:	f7ff fcbb 	bl	8000540 <HAL_GetTick>
 8000bca:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bcc:	682b      	ldr	r3, [r5, #0]
 8000bce:	019b      	lsls	r3, r3, #6
 8000bd0:	f57f aee6 	bpl.w	80009a0 <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bd4:	f7ff fcb4 	bl	8000540 <HAL_GetTick>
 8000bd8:	1b00      	subs	r0, r0, r4
 8000bda:	2864      	cmp	r0, #100	; 0x64
 8000bdc:	d9f6      	bls.n	8000bcc <HAL_RCC_OscConfig+0x2ac>
 8000bde:	e708      	b.n	80009f2 <HAL_RCC_OscConfig+0xd2>
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40007000 	.word	0x40007000
 8000be8:	40023870 	.word	0x40023870
 8000bec:	40023802 	.word	0x40023802
 8000bf0:	42470000 	.word	0x42470000
 8000bf4:	42470e80 	.word	0x42470e80
 8000bf8:	42470060 	.word	0x42470060

08000bfc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bfc:	4913      	ldr	r1, [pc, #76]	; (8000c4c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000bfe:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c00:	688b      	ldr	r3, [r1, #8]
 8000c02:	f003 030c 	and.w	r3, r3, #12
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	d003      	beq.n	8000c12 <HAL_RCC_GetSysClockFreq+0x16>
 8000c0a:	2b08      	cmp	r3, #8
 8000c0c:	d003      	beq.n	8000c16 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c0e:	4810      	ldr	r0, [pc, #64]	; (8000c50 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c10:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c12:	4810      	ldr	r0, [pc, #64]	; (8000c54 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c14:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c16:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c18:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c1a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c1c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c20:	bf14      	ite	ne
 8000c22:	480c      	ldrne	r0, [pc, #48]	; (8000c54 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c24:	480a      	ldreq	r0, [pc, #40]	; (8000c50 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c26:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c2a:	bf18      	it	ne
 8000c2c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c2e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c32:	fba1 0100 	umull	r0, r1, r1, r0
 8000c36:	f7ff fac5 	bl	80001c4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <HAL_RCC_GetSysClockFreq+0x50>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c42:	3301      	adds	r3, #1
 8000c44:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c46:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c4a:	bd08      	pop	{r3, pc}
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	00f42400 	.word	0x00f42400
 8000c54:	017d7840 	.word	0x017d7840

08000c58 <HAL_RCC_ClockConfig>:
{
 8000c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c5c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c5e:	4604      	mov	r4, r0
 8000c60:	b910      	cbnz	r0, 8000c68 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c62:	2001      	movs	r0, #1
 8000c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c68:	4b46      	ldr	r3, [pc, #280]	; (8000d84 <HAL_RCC_ClockConfig+0x12c>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	f002 020f 	and.w	r2, r2, #15
 8000c70:	428a      	cmp	r2, r1
 8000c72:	d32e      	bcc.n	8000cd2 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c74:	6821      	ldr	r1, [r4, #0]
 8000c76:	078f      	lsls	r7, r1, #30
 8000c78:	d433      	bmi.n	8000ce2 <HAL_RCC_ClockConfig+0x8a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c7a:	07c8      	lsls	r0, r1, #31
 8000c7c:	d446      	bmi.n	8000d0c <HAL_RCC_ClockConfig+0xb4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c7e:	4b41      	ldr	r3, [pc, #260]	; (8000d84 <HAL_RCC_ClockConfig+0x12c>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	f002 020f 	and.w	r2, r2, #15
 8000c86:	4295      	cmp	r5, r2
 8000c88:	d36a      	bcc.n	8000d60 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c8a:	6822      	ldr	r2, [r4, #0]
 8000c8c:	0751      	lsls	r1, r2, #29
 8000c8e:	d470      	bmi.n	8000d72 <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c90:	0713      	lsls	r3, r2, #28
 8000c92:	d507      	bpl.n	8000ca4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c94:	4a3c      	ldr	r2, [pc, #240]	; (8000d88 <HAL_RCC_ClockConfig+0x130>)
 8000c96:	6921      	ldr	r1, [r4, #16]
 8000c98:	6893      	ldr	r3, [r2, #8]
 8000c9a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c9e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ca2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000ca4:	f7ff ffaa 	bl	8000bfc <HAL_RCC_GetSysClockFreq>
 8000ca8:	4b37      	ldr	r3, [pc, #220]	; (8000d88 <HAL_RCC_ClockConfig+0x130>)
 8000caa:	22f0      	movs	r2, #240	; 0xf0
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	fa92 f2a2 	rbit	r2, r2
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cba:	40d3      	lsrs	r3, r2
 8000cbc:	4a33      	ldr	r2, [pc, #204]	; (8000d8c <HAL_RCC_ClockConfig+0x134>)
 8000cbe:	5cd3      	ldrb	r3, [r2, r3]
 8000cc0:	40d8      	lsrs	r0, r3
 8000cc2:	4b33      	ldr	r3, [pc, #204]	; (8000d90 <HAL_RCC_ClockConfig+0x138>)
 8000cc4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f7ff fc04 	bl	80004d4 <HAL_InitTick>
  return HAL_OK;
 8000ccc:	2000      	movs	r0, #0
 8000cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cd2:	b2ca      	uxtb	r2, r1
 8000cd4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 030f 	and.w	r3, r3, #15
 8000cdc:	4299      	cmp	r1, r3
 8000cde:	d1c0      	bne.n	8000c62 <HAL_RCC_ClockConfig+0xa>
 8000ce0:	e7c8      	b.n	8000c74 <HAL_RCC_ClockConfig+0x1c>
 8000ce2:	4b29      	ldr	r3, [pc, #164]	; (8000d88 <HAL_RCC_ClockConfig+0x130>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ce4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ce8:	bf1e      	ittt	ne
 8000cea:	689a      	ldrne	r2, [r3, #8]
 8000cec:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000cf0:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cf2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8000cf4:	bf42      	ittt	mi
 8000cf6:	689a      	ldrmi	r2, [r3, #8]
 8000cf8:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000cfc:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cfe:	689a      	ldr	r2, [r3, #8]
 8000d00:	68a0      	ldr	r0, [r4, #8]
 8000d02:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d06:	4302      	orrs	r2, r0
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	e7b6      	b.n	8000c7a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d0c:	6861      	ldr	r1, [r4, #4]
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <HAL_RCC_ClockConfig+0x130>)
 8000d10:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d12:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d14:	d11c      	bne.n	8000d50 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d16:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1a:	d0a2      	beq.n	8000c62 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d1c:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d1e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d22:	f022 0203 	bic.w	r2, r2, #3
 8000d26:	430a      	orrs	r2, r1
 8000d28:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000d2a:	f7ff fc09 	bl	8000540 <HAL_GetTick>
 8000d2e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d30:	4e15      	ldr	r6, [pc, #84]	; (8000d88 <HAL_RCC_ClockConfig+0x130>)
 8000d32:	68b3      	ldr	r3, [r6, #8]
 8000d34:	6862      	ldr	r2, [r4, #4]
 8000d36:	f003 030c 	and.w	r3, r3, #12
 8000d3a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d3e:	d09e      	beq.n	8000c7e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d40:	f7ff fbfe 	bl	8000540 <HAL_GetTick>
 8000d44:	1bc0      	subs	r0, r0, r7
 8000d46:	4540      	cmp	r0, r8
 8000d48:	d9f3      	bls.n	8000d32 <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8000d4a:	2003      	movs	r0, #3
}
 8000d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d50:	2902      	cmp	r1, #2
 8000d52:	d102      	bne.n	8000d5a <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d54:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000d58:	e7df      	b.n	8000d1a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d5a:	f012 0f02 	tst.w	r2, #2
 8000d5e:	e7dc      	b.n	8000d1a <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d60:	b2ea      	uxtb	r2, r5
 8000d62:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	429d      	cmp	r5, r3
 8000d6c:	f47f af79 	bne.w	8000c62 <HAL_RCC_ClockConfig+0xa>
 8000d70:	e78b      	b.n	8000c8a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d72:	4905      	ldr	r1, [pc, #20]	; (8000d88 <HAL_RCC_ClockConfig+0x130>)
 8000d74:	68e0      	ldr	r0, [r4, #12]
 8000d76:	688b      	ldr	r3, [r1, #8]
 8000d78:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d7c:	4303      	orrs	r3, r0
 8000d7e:	608b      	str	r3, [r1, #8]
 8000d80:	e786      	b.n	8000c90 <HAL_RCC_ClockConfig+0x38>
 8000d82:	bf00      	nop
 8000d84:	40023c00 	.word	0x40023c00
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	08001030 	.word	0x08001030
 8000d90:	20000000 	.word	0x20000000

08000d94 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000d94:	4b01      	ldr	r3, [pc, #4]	; (8000d9c <HAL_RCC_GetHCLKFreq+0x8>)
 8000d96:	6818      	ldr	r0, [r3, #0]
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000000 	.word	0x20000000

08000da0 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da0:	2301      	movs	r3, #1
{
 8000da2:	b530      	push	{r4, r5, lr}
 8000da4:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000da8:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000daa:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000dac:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dae:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000db0:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 240;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000db2:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000db4:	23f0      	movs	r3, #240	; 0xf0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db8:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dba:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dbc:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000dbe:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dc0:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dc2:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc4:	f7ff fdac 	bl	8000920 <HAL_RCC_OscConfig>
 8000dc8:	b100      	cbz	r0, 8000dcc <SystemClock_Config+0x2c>
 8000dca:	e7fe      	b.n	8000dca <SystemClock_Config+0x2a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dcc:	230f      	movs	r3, #15
 8000dce:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dd0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dd4:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dda:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ddc:	2103      	movs	r1, #3
 8000dde:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de0:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000de2:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000de4:	f7ff ff38 	bl	8000c58 <HAL_RCC_ClockConfig>
 8000de8:	4604      	mov	r4, r0
 8000dea:	b100      	cbz	r0, 8000dee <SystemClock_Config+0x4e>
 8000dec:	e7fe      	b.n	8000dec <SystemClock_Config+0x4c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000dee:	f7ff ffd1 	bl	8000d94 <HAL_RCC_GetHCLKFreq>
 8000df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df6:	fbb0 f0f3 	udiv	r0, r0, r3
 8000dfa:	f7ff fc83 	bl	8000704 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000dfe:	4628      	mov	r0, r5
 8000e00:	f7ff fc96 	bl	8000730 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000e04:	4622      	mov	r2, r4
 8000e06:	4621      	mov	r1, r4
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f7ff fc46 	bl	800069c <HAL_NVIC_SetPriority>
}
 8000e10:	b013      	add	sp, #76	; 0x4c
 8000e12:	bd30      	pop	{r4, r5, pc}

08000e14 <main>:
{
 8000e14:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 8000e16:	f7ff fb71 	bl	80004fc <HAL_Init>
  SystemClock_Config();
 8000e1a:	f7ff ffc1 	bl	8000da0 <SystemClock_Config>
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	4a0f      	ldr	r2, [pc, #60]	; (8000e60 <main+0x4c>)
 8000e22:	9301      	str	r3, [sp, #4]
 8000e24:	6b11      	ldr	r1, [r2, #48]	; 0x30
  hcan1.Instance = CAN1;
 8000e26:	480f      	ldr	r0, [pc, #60]	; (8000e64 <main+0x50>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e28:	f041 0102 	orr.w	r1, r1, #2
 8000e2c:	6311      	str	r1, [r2, #48]	; 0x30
 8000e2e:	6b12      	ldr	r2, [r2, #48]	; 0x30
  hcan1.Init.Prescaler = 16;
 8000e30:	490d      	ldr	r1, [pc, #52]	; (8000e68 <main+0x54>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	f002 0202 	and.w	r2, r2, #2
 8000e36:	9201      	str	r2, [sp, #4]
 8000e38:	9a01      	ldr	r2, [sp, #4]
  hcan1.Init.Prescaler = 16;
 8000e3a:	2210      	movs	r2, #16
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e3c:	6083      	str	r3, [r0, #8]
  hcan1.Init.Prescaler = 16;
 8000e3e:	e880 0006 	stmia.w	r0, {r1, r2}
  hcan1.Init.SJW = CAN_SJW_1TQ;
 8000e42:	60c3      	str	r3, [r0, #12]
  hcan1.Init.BS1 = CAN_BS1_1TQ;
 8000e44:	6103      	str	r3, [r0, #16]
  hcan1.Init.BS2 = CAN_BS2_1TQ;
 8000e46:	6143      	str	r3, [r0, #20]
  hcan1.Init.TTCM = DISABLE;
 8000e48:	6183      	str	r3, [r0, #24]
  hcan1.Init.ABOM = DISABLE;
 8000e4a:	61c3      	str	r3, [r0, #28]
  hcan1.Init.AWUM = DISABLE;
 8000e4c:	6203      	str	r3, [r0, #32]
  hcan1.Init.NART = DISABLE;
 8000e4e:	6243      	str	r3, [r0, #36]	; 0x24
  hcan1.Init.RFLM = DISABLE;
 8000e50:	6283      	str	r3, [r0, #40]	; 0x28
  hcan1.Init.TXFP = DISABLE;
 8000e52:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000e54:	f7ff fb7a 	bl	800054c <HAL_CAN_Init>
 8000e58:	b100      	cbz	r0, 8000e5c <main+0x48>
 8000e5a:	e7fe      	b.n	8000e5a <main+0x46>
 8000e5c:	e7fe      	b.n	8000e5c <main+0x48>
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	20000024 	.word	0x20000024
 8000e68:	40006400 	.word	0x40006400

08000e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6e:	2003      	movs	r0, #3
 8000e70:	f7ff fc02 	bl	8000678 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f06f 000b 	mvn.w	r0, #11
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	f7ff fc0e 	bl	800069c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	f06f 000a 	mvn.w	r0, #10
 8000e86:	4611      	mov	r1, r2
 8000e88:	f7ff fc08 	bl	800069c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f06f 0009 	mvn.w	r0, #9
 8000e92:	4611      	mov	r1, r2
 8000e94:	f7ff fc02 	bl	800069c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f06f 0004 	mvn.w	r0, #4
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	f7ff fbfc 	bl	800069c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f06f 0003 	mvn.w	r0, #3
 8000eaa:	4611      	mov	r1, r2
 8000eac:	f7ff fbf6 	bl	800069c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f06f 0001 	mvn.w	r0, #1
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	f7ff fbf0 	bl	800069c <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ebc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	f7ff bbe8 	b.w	800069c <HAL_NVIC_SetPriority>

08000ecc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ecc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 8000ece:	6802      	ldr	r2, [r0, #0]
 8000ed0:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <HAL_CAN_MspInit+0x48>)
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d11a      	bne.n	8000f0c <HAL_CAN_MspInit+0x40>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8000edc:	9100      	str	r1, [sp, #0]
 8000ede:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee0:	480d      	ldr	r0, [pc, #52]	; (8000f18 <HAL_CAN_MspInit+0x4c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ee2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000ee6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	9103      	str	r1, [sp, #12]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ef4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ef8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f02:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f04:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f06:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f08:	f7ff fc24 	bl	8000754 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f0c:	b007      	add	sp, #28
 8000f0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f12:	bf00      	nop
 8000f14:	40006400 	.word	0x40006400
 8000f18:	40020400 	.word	0x40020400

08000f1c <NMI_Handler>:
 8000f1c:	4770      	bx	lr

08000f1e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000f1e:	e7fe      	b.n	8000f1e <HardFault_Handler>

08000f20 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000f20:	e7fe      	b.n	8000f20 <MemManage_Handler>

08000f22 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000f22:	e7fe      	b.n	8000f22 <BusFault_Handler>

08000f24 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000f24:	e7fe      	b.n	8000f24 <UsageFault_Handler>

08000f26 <SVC_Handler>:
 8000f26:	4770      	bx	lr

08000f28 <DebugMon_Handler>:
 8000f28:	4770      	bx	lr

08000f2a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000f2a:	4770      	bx	lr

08000f2c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000f2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2e:	f7ff faff 	bl	8000530 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8000f36:	f7ff bc08 	b.w	800074a <HAL_SYSTICK_IRQHandler>
	...

08000f3c <SystemInit>:
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f3c:	2100      	movs	r1, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <SystemInit+0x34>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	f042 0201 	orr.w	r2, r2, #1
 8000f46:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000f48:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000f50:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f54:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000f56:	4a07      	ldr	r2, [pc, #28]	; (8000f74 <SystemInit+0x38>)
 8000f58:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f60:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  RCC->CIR = 0x00000000;
 8000f66:	60d9      	str	r1, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <SystemInit+0x3c>)
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800
 8000f74:	24003010 	.word	0x24003010
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000f80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f82:	e003      	b.n	8000f8c <LoopCopyDataInit>

08000f84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f8a:	3104      	adds	r1, #4

08000f8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f8c:	480b      	ldr	r0, [pc, #44]	; (8000fbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f94:	d3f6      	bcc.n	8000f84 <CopyDataInit>
  ldr  r2, =_sbss
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f98:	e002      	b.n	8000fa0 <LoopFillZerobss>

08000f9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000f9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f9c:	f842 3b04 	str.w	r3, [r2], #4

08000fa0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fa2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fa4:	d3f9      	bcc.n	8000f9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fa6:	f7ff ffc9 	bl	8000f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000faa:	f000 f811 	bl	8000fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fae:	f7ff ff31 	bl	8000e14 <main>
  bx  lr    
 8000fb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fb4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fb8:	08001050 	.word	0x08001050
  ldr  r0, =_sdata
 8000fbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fc0:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000fc4:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000fc8:	20000068 	.word	0x20000068

08000fcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC_IRQHandler>
	...

08000fd0 <__libc_init_array>:
 8000fd0:	b570      	push	{r4, r5, r6, lr}
 8000fd2:	2500      	movs	r5, #0
 8000fd4:	4e0c      	ldr	r6, [pc, #48]	; (8001008 <__libc_init_array+0x38>)
 8000fd6:	4c0d      	ldr	r4, [pc, #52]	; (800100c <__libc_init_array+0x3c>)
 8000fd8:	1ba4      	subs	r4, r4, r6
 8000fda:	10a4      	asrs	r4, r4, #2
 8000fdc:	42a5      	cmp	r5, r4
 8000fde:	d109      	bne.n	8000ff4 <__libc_init_array+0x24>
 8000fe0:	f000 f81a 	bl	8001018 <_init>
 8000fe4:	2500      	movs	r5, #0
 8000fe6:	4e0a      	ldr	r6, [pc, #40]	; (8001010 <__libc_init_array+0x40>)
 8000fe8:	4c0a      	ldr	r4, [pc, #40]	; (8001014 <__libc_init_array+0x44>)
 8000fea:	1ba4      	subs	r4, r4, r6
 8000fec:	10a4      	asrs	r4, r4, #2
 8000fee:	42a5      	cmp	r5, r4
 8000ff0:	d105      	bne.n	8000ffe <__libc_init_array+0x2e>
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
 8000ff4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ff8:	4798      	blx	r3
 8000ffa:	3501      	adds	r5, #1
 8000ffc:	e7ee      	b.n	8000fdc <__libc_init_array+0xc>
 8000ffe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001002:	4798      	blx	r3
 8001004:	3501      	adds	r5, #1
 8001006:	e7f2      	b.n	8000fee <__libc_init_array+0x1e>
 8001008:	08001048 	.word	0x08001048
 800100c:	08001048 	.word	0x08001048
 8001010:	08001048 	.word	0x08001048
 8001014:	0800104c 	.word	0x0800104c

08001018 <_init>:
 8001018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101a:	bf00      	nop
 800101c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800101e:	bc08      	pop	{r3}
 8001020:	469e      	mov	lr, r3
 8001022:	4770      	bx	lr

08001024 <_fini>:
 8001024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001026:	bf00      	nop
 8001028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800102a:	bc08      	pop	{r3}
 800102c:	469e      	mov	lr, r3
 800102e:	4770      	bx	lr
